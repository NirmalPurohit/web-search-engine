Java Class Methods w3schools.com THE WORLD'S LARGEST WEB DEVELOPER SITE HTML CSS JAVASCRIPT SQL PHP BOOTSTRAP HOW TO JQUERY W3.CSS PYTHON XML MORE   FORUM EXAMPLES REFERENCES × HTML and CSS Learn HTML Learn CSS Learn W3.CSS Learn Colors Learn Bootstrap 3 Learn Bootstrap 4 Learn Graphics Learn Icons Learn How To JavaScript Learn JavaScript Learn jQuery Learn AngularJS Learn JSON Learn AJAX Learn W3.JS Server Side Learn SQL Learn PHP Learn Python Learn Java Learn ASP Learn Node.js Learn Raspberry Pi Web Building Web Templates Web Statistics Web Certificates Web Editor Web Development XML Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery × HTML HTML Tag Reference HTML Event Reference HTML Color Reference HTML Attribute Reference HTML Canvas Reference HTML SVG Reference Google Maps Reference Charsets HTML Character Sets HTML ASCII HTML ANSI HTML Windows-1252 HTML ISO-8859-1 HTML Symbols HTML UTF-8 CSS CSS Reference CSS Browser Support CSS Selector Reference W3.CSS Reference Bootstrap Reference Icon Reference XML XML Reference XML Http Reference XSLT Reference XML Schema Reference JavaScript JavaScript Reference HTML DOM Reference jQuery Reference AngularJS Reference W3.JS Reference Server Side PHP Reference SQL Reference Python Reference ASP Reference × HTML/CSS HTML Examples HTML Exercises CSS Examples CSS Exercises W3.CSS Examples W3.CSS Templates Bootstrap Examples How To Examples SVG Examples JavaScript JavaScript Examples JavaScript Exercises HTML DOM Examples jQuery Examples AngularJS Examples AJAX Examples W3.JS Examples Server Side PHP Examples ASP Examples SQL Exercises Python Exercises XML XML Examples XSLT Examples XPath Examples XML Schema Examples SVG Examples Quizzes HTML Quiz CSS Quiz JavaScript Quiz Bootstrap Quiz jQuery Quiz PHP Quiz SQL Quiz XML Quiz × Java Tutorial Java HOME Java Intro Java Get Started Java Syntax Java Comments Java Variables Java Data Types Java Operators Java Strings Java Math Java Booleans Java If...Else Java Switch Java While Loop Java For Loop Java Break/Continue Java Arrays Java Exceptions Java Methods Java Classes Java Classes/Objects Java Class Attributes Java Class Methods Java Constructors Java Modifiers Java Encapsulation Java Packages / API Java Inheritance Java Polymorphism Java Interface Java Enums Java User Input Java Date Java ArrayList Java HashMap Java Files Java Examples Java Examples Java Class Methods ❮ Previous Next ❯ Java Class Methods You learned from the Java Methods chapter that methods are declared within a class, and that they are used to perform certain actions: Example Create a method named myMethod() in MyClass: public class MyClass { static void myMethod() { System.out.println("Hello World!"); } } myMethod() prints a text (the action), when it is called. To call a method, write the method's name followed by two parantheses () and a semicolon; Example Inside main, call the myMethod() method: public class MyClass { static void myMethod() { System.out.println("Hello World!"); } public static void main(String[] args) { myMethod(); } } // Outputs "Hello World!" Run example » Method Parameters Methods can also have parameters, which is used to pass information: Example Create a method that accepts an int parameter called x. In the main() method, we call myMethod() and set an int parameter of 10: public class MyClass { static void myMethod(int x) { System.out.println(x); } public static void main(String[] args) { myMethod(10); } } // Outputs 10 Run example » Static or Public In the examples above we used the static keyword for each method instead of public. A static method means that it belongs to the class, and cannot be accessed from outside of the class, unlike public. To access a method with an object, you must must declare the method as public: Example public class MyClass { // Static method static void myStaticMethod() { System.out.println("Static methods can be called without creating objects"); } // Public method public void myPublicMethod() { System.out.println("Public methods must be called by creating objects"); } } Note: You will learn more about these keywords (called modifiers) in the Java Modifiers chapter. Access Methods With Objects Now that you know how to create classes and methods, we can start creating objects that we will use to access class methods. Example Create a Car object named myCar. Call the fullThrottle() and speed() methods on the myCar object, and run the program: // Create a Car class public class Car { // Create a fullThrottle() method public void fullThrottle() { System.out.println("The car is going as fast as it can!"); } // Create a speed() method and add a parameter public void speed(int maxSpeed) { System.out.println("Max speed is: " + maxSpeed); } // Inside main, call the methods on the myCar object public static void main(String[] args) { Car myCar = new Car(); // Create a myCar object myCar.fullThrottle(); // Call the fullThrottle() method myCar.speed(200); // Call the speed() method } } // The car is going as fast as it can! // Max speed is: 200 Run example » Example explained 1) We created a custom Car class with the class keyword. 2) We created the fullThrottle() and speed() methods in the Car class. 3) The fullThrottle() method and the speed() method will print out some text, when they are called. 4) The speed() method accepts an int parameter called maxSpeed - we will use this in 8). 5) In order to use the Car class and its methods, we need to create an object of the Car Class. 6) Then, go to the main() method, which you know by now is a built-in Java method that runs your program (any code inside main is executed). 7) By using the new keyword we created a Car object with the name myCar. 8) Then, we call the fullThrottle() and speed() methods on the myCar object, and run the program using the name of the object (myCar), followed by a dot (.), followed by the name of the method (fullThrottle(); and speed(200);). Notice that we add an int parameter of 200 inside the speed() method. Remember that.. The dot (.) is used to access the object's attributes and methods. To call a method in Java, write the method name followed by a set of parantheses (), followed by a semicolon (;). A class must have a matching filename (Car and Car.java). Using Multiple Classes Like we specified in the Classes chapter, it is a good practice to create an object of a class and access it in another class. Remember that the name of the java file should match the class name. In this example, we have created two files in the same directory: Car.java OtherClass.java Car.java public class Car { public void fullThrottle() { System.out.println("The car is going as fast as it can!"); } public void speed(int maxSpeed) { System.out.println("Max speed is: " + maxSpeed); } } OtherClass.java class OtherClass { public static void main(String[] args) { Car myCar = new Car(); // Create a myCar object myCar.fullThrottle(); // Call the fullThrottle() method myCar.speed(200); // Call the speed() method } } When both files have been compiled: C:\Users\Your Name>javac Car.java C:\Users\Your Name>javac OtherClass.java Run the OtherClass.java file: C:\Users\Your Name>java OtherClass And the output will be: The car is going as fast as it can! Max speed is: 200 Run example » ❮ Previous Next ❯ COLOR PICKER HOW TO Tabs Dropdowns Accordions Side Navigation Top Navigation Modal Boxes Progress Bars Parallax Login Form HTML Includes Google Maps Range Sliders Tooltips Slideshow Filter List Sort List SHARE CERTIFICATES HTML CSS JavaScript PHP jQuery Bootstrap XML Read More » REPORT ERROR PRINT PAGE FORUM ABOUT × Your Suggestion: Your E-mail: Page address: Description: Submit × Thank You For Helping Us! Your message has been sent to W3Schools. Top 10 Tutorials HTML Tutorial CSS Tutorial JavaScript Tutorial How To Tutorial W3.CSS Tutorial Bootstrap Tutorial SQL Tutorial PHP Tutorial jQuery Tutorial Python Tutorial Top 10 References HTML Reference CSS Reference JavaScript Reference W3.CSS Reference Bootstrap Reference SQL Reference PHP Reference HTML Colors jQuery Reference Python Reference Top 10 Examples HTML Examples CSS Examples JavaScript Examples How To Examples W3.CSS Examples Bootstrap Examples PHP Examples jQuery Examples Angular Examples XML Examples Web Certificates HTML Certificate CSS Certificate JavaScript Certificate jQuery Certificate PHP Certificate Bootstrap Certificate XML Certificate W3Schools is optimized for learning, testing, and training. Examples might be simplified to improve reading and basic understanding. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using this site, you agree to have read and accepted our terms of use, cookie and privacy policy. Copyright 1999-2018 by Refsnes Data. All Rights Reserved. Powered by W3.CSS.
