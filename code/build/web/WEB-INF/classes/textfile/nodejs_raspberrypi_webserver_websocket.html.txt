Node.js Raspberry Pi Webserver with WebSocket w3schools.com THE WORLD'S LARGEST WEB DEVELOPER SITE HTML CSS JAVASCRIPT SQL PHP BOOTSTRAP HOW TO JQUERY W3.CSS PYTHON XML MORE   FORUM EXAMPLES REFERENCES × HTML and CSS Learn HTML Learn CSS Learn W3.CSS Learn Colors Learn Bootstrap 3 Learn Bootstrap 4 Learn Graphics Learn Icons Learn How To JavaScript Learn JavaScript Learn jQuery Learn AngularJS Learn JSON Learn AJAX Learn W3.JS Server Side Learn SQL Learn PHP Learn Python Learn Java Learn ASP Learn Node.js Learn Raspberry Pi Web Building Web Templates Web Statistics Web Certificates Web Editor Web Development XML Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery × HTML HTML Tag Reference HTML Event Reference HTML Color Reference HTML Attribute Reference HTML Canvas Reference HTML SVG Reference Google Maps Reference Charsets HTML Character Sets HTML ASCII HTML ANSI HTML Windows-1252 HTML ISO-8859-1 HTML Symbols HTML UTF-8 CSS CSS Reference CSS Browser Support CSS Selector Reference W3.CSS Reference Bootstrap Reference Icon Reference XML XML Reference XML Http Reference XSLT Reference XML Schema Reference JavaScript JavaScript Reference HTML DOM Reference jQuery Reference AngularJS Reference W3.JS Reference Server Side PHP Reference SQL Reference Python Reference ASP Reference × HTML/CSS HTML Examples HTML Exercises CSS Examples CSS Exercises W3.CSS Examples W3.CSS Templates Bootstrap Examples How To Examples SVG Examples JavaScript JavaScript Examples JavaScript Exercises HTML DOM Examples jQuery Examples AngularJS Examples AJAX Examples W3.JS Examples Server Side PHP Examples ASP Examples SQL Exercises Python Exercises XML XML Examples XSLT Examples XPath Examples XML Schema Examples SVG Examples Quizzes HTML Quiz CSS Quiz JavaScript Quiz Bootstrap Quiz jQuery Quiz PHP Quiz SQL Quiz XML Quiz × Node.js Tutorial Node.js HOME Node.js Intro Node.js Get Started Node.js Modules Node.js HTTP Module Node.js File System Node.js URL Module Node.js NPM Node.js Events Node.js Upload Files Node.js Email Node.js MySQL MySQL Get Started MySQL Create Database MySQL Create Table MySQL Insert Into MySQL Select From MySQL Where MySQL Order By MySQL Delete MySQL Drop Table MySQL Update MySQL Limit MySQL Join Node.js MongoDB MongoDB Get Started MongoDB Create Database MongoDB Create Collection MongoDB Insert MongoDB Find MongoDB Query MongoDB Sort MongoDB Delete MongoDB Drop Collection MongoDB Update MongoDB Limit MongoDB Join Raspberry Pi RasPi Get Started RasPi GPIO Introduction RasPi Blinking LED RasPi LED & Pushbutton RasPi Flowing LEDs RasPi WebSocket RasPi RGB LED WebSocket RasPi Components Node.js Reference Built-in Modules Node.js and Raspberry Pi - Webserver with WebSocket ❮ Previous Next ❯ What is WebSocket? WebSocket enables bidirectional communication in real time over the web. WebSocket can be run together with a normal HTTP server. You can click a button in a web browser, and enable a GPIO on your Raspberry Pi which turns on a light in your house. All in real time, and with communication going both ways! In this chapter, we will set up a web server with WebSocket. Then create a browser UI to interact with our earlier example of turning a LED on and off with a button. What Do I Need? For this tutorial you need a Raspberry Pi. In our examples we use a a Raspberry Pi 3, but this tutorial should work for most versions. For this you need: A Raspberry Pi with Raspian, internet, SSH, with Node.js installed The onoff module for Node.js The socket.io module for Node.js 1 x Breadboard 1 x 68 Ohm resistor 1 x 1k Ohm resistor 1 x Through Hole LED 1 x Push Button 4 x Female to male jumper wires 1 x Male to Male jumper wires Click the links in the list above for descriptions of the different components. Note: The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will shine. Compared to our earlier example, the only new thing we need is to set up a web server, and install the socket.io module. Webserver for Raspberry Pi and Node.js Following the earlier chapters in this Node.js tutorial, lets set up a web server that can serve HTML files. In our "nodetest" directory create a new directory we can use for static html files: pi@w3demopi:~/nodetest $ mkdir public Now lets set up a webserver. Create a Node.js file that opens the requested file and returns the content to the client. If anything goes wrong, throw a 404 error. pi@w3demopi:~/nodetest $ nano webserver.js webserver.js: var http = require('http').createServer(handler); //require http server, and create server with function handler() var fs = require('fs'); //require filesystem module http.listen(8080); //listen to port 8080 function handler (req, res) { //create server fs.readFile(__dirname + '/public/index.html', function(err, data) { //read file index.html in public folder if (err) { res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error return res.end("404 Not Found"); } res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML res.write(data); //write data from index.html return res.end(); }); } Go to the folder "public": pi@w3demopi:~/nodetest $ cd public And create a HTML file, index.html: pi@w3demopi:~/nodetest/public $ nano index.html index.html: <!DOCTYPE html> <html> <body> <h1>Control LED light</h1> <input id="light" type="checkbox">LED </body> </html> This file will not have any functionality yet. For now it is just a placeholder. Lets see if the webserver is working: pi@w3demopi:~/nodetest/public $ cd .. pi@w3demopi:~/nodetest $ node webserver.js Open the website in a browser using http://[RaspberryPi_IP]:8080/: The webserver should now be up and running, and we can move on to the WebSocket part. Install socket.io for Node.js With the webserver set up, update your Raspberry Pi system packages to their latest versions. Update your system package list: pi@w3demopi:~ $ sudo apt-get update Upgrade all your installed packages to their latest version: pi@w3demopi:~ $ sudo apt-get dist-upgrade Doing this regularly will keep your Raspberry Pi installation up to date. To download and install newest version of socket.io, use the following command: pi@w3demopi:~ $ npm install socket.io --save Adding WebSocket to our Webserver Now we can use WebSocket in our application. Lets update our index.html file: index.html: <!DOCTYPE html> <html> <body> <h1>Control LED light</h1> <p><input type="checkbox" id="light"></p> <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script> <!-- include socket.io client side script --> <script> var socket = io(); //load socket.io-client and connect to the host that serves the page window.addEventListener("load", function(){ //when page loads var lightbox = document.getElementById("light"); lightbox.addEventListener("change", function() { //add event listener for when checkbox changes socket.emit("light", Number(this.checked)); //send button status to server (as 1 or 0) }); }); socket.on('light', function (data) { //get button status from client document.getElementById("light").checked = data; //change checkbox according to push button on Raspberry Pi socket.emit("light", data); //send push button status to back to server }); </script> </html> </body> </html> And our webserver.js file: webserver.js: var http = require('http').createServer(handler); //require http server, and create server with function handler() var fs = require('fs'); //require filesystem module var io = require('socket.io')(http) //require socket.io module and pass the http object (server) http.listen(8080); //listen to port 8080 function handler (req, res) { //create server fs.readFile(__dirname + '/public/index.html', function(err, data) { //read file index.html in public folder if (err) { res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error return res.end("404 Not Found"); } res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML res.write(data); //write data from index.html return res.end(); }); } io.sockets.on('connection', function (socket) {// WebSocket Connection var lightvalue = 0; //static variable for current status socket.on('light', function(data) { //get light switch status from client lightvalue = data; if (lightvalue) { console.log(lightvalue); //turn LED on or off, for now we will just show it in console.log } }); }); Lets test the server: pi@w3demopi:~ $ node webserver.js Open the website in a browser using http://[RaspberryPi_IP]:8080/: Now the server should output all the changes to the checkbox to the console on the Raspberry Pi. The client is sending the changes to the server, and the server is responding. Lets add the push button controlled LED from a previous chapter. Adding Hardware, and sending a response to the Client Lets update our webserver.js file again. We will use a lot of the code from the Pushbutton controlled LED chapter. webserver.js: var http = require('http').createServer(handler); //require http server, and create server with function handler() var fs = require('fs'); //require filesystem module var io = require('socket.io')(http) //require socket.io module and pass the http object (server) var Gpio = require('onoff').Gpio; //include onoff to interact with the GPIO var LED = new Gpio(4, 'out'); //use GPIO pin 4 as output var pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as input, and 'both' button presses, and releases should be handled http.listen(8080); //listen to port 8080 function handler (req, res) { //create server fs.readFile(__dirname + '/public/index.html', function(err, data) { //read file index.html in public folder if (err) { res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error return res.end("404 Not Found"); } res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML res.write(data); //write data from index.html return res.end(); }); } io.sockets.on('connection', function (socket) {// WebSocket Connection var lightvalue = 0; //static variable for current status pushButton.watch(function (err, value) { //Watch for hardware interrupts on pushButton if (err) { //if an error console.error('There was an error', err); //output error message to console return; } lightvalue = value; socket.emit('light', lightvalue); //send button status to client }); socket.on('light', function(data) { //get light switch status from client lightvalue = data; if (lightvalue != LED.readSync()) { //only change LED if status has changed LED.writeSync(lightvalue); //turn LED on or off } }); }); process.on('SIGINT', function () { //on ctrl+c LED.writeSync(0); // Turn LED off LED.unexport(); // Unexport LED GPIO to free resources pushButton.unexport(); // Unexport Button GPIO to free resources process.exit(); //exit completely }); Lets test the server: pi@w3demopi:~ $ node webserver.js Open the website in a browser using http://[RaspberryPi_IP]:8080/: Now the server should output all the changes to the checkbox to the console on the Raspberry Pi. The client is sending the changes to the server, and the server is responding. End the program with Ctrl+c. ❮ Previous Next ❯ COLOR PICKER HOW TO Tabs Dropdowns Accordions Side Navigation Top Navigation Modal Boxes Progress Bars Parallax Login Form HTML Includes Google Maps Range Sliders Tooltips Slideshow Filter List Sort List SHARE CERTIFICATES HTML CSS JavaScript PHP jQuery Bootstrap XML Read More » REPORT ERROR PRINT PAGE FORUM ABOUT × Your Suggestion: Your E-mail: Page address: Description: Submit × Thank You For Helping Us! Your message has been sent to W3Schools. Top 10 Tutorials HTML Tutorial CSS Tutorial JavaScript Tutorial How To Tutorial W3.CSS Tutorial Bootstrap Tutorial SQL Tutorial PHP Tutorial jQuery Tutorial Python Tutorial Top 10 References HTML Reference CSS Reference JavaScript Reference W3.CSS Reference Bootstrap Reference SQL Reference PHP Reference HTML Colors jQuery Reference Python Reference Top 10 Examples HTML Examples CSS Examples JavaScript Examples How To Examples W3.CSS Examples Bootstrap Examples PHP Examples jQuery Examples Angular Examples XML Examples Web Certificates HTML Certificate CSS Certificate JavaScript Certificate jQuery Certificate PHP Certificate Bootstrap Certificate XML Certificate W3Schools is optimized for learning, testing, and training. Examples might be simplified to improve reading and basic understanding. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using this site, you agree to have read and accepted our terms of use, cookie and privacy policy. Copyright 1999-2018 by Refsnes Data. All Rights Reserved. Powered by W3.CSS.
