ASP Quick Reference w3schools.com THE WORLD'S LARGEST WEB DEVELOPER SITE HTML CSS JAVASCRIPT SQL PHP BOOTSTRAP HOW TO JQUERY W3.CSS PYTHON XML MORE   FORUM EXAMPLES REFERENCES × HTML and CSS Learn HTML Learn CSS Learn W3.CSS Learn Colors Learn Bootstrap 3 Learn Bootstrap 4 Learn Graphics Learn Icons Learn How To JavaScript Learn JavaScript Learn jQuery Learn AngularJS Learn JSON Learn AJAX Learn W3.JS Server Side Learn SQL Learn PHP Learn Python Learn Java Learn ASP Learn Node.js Learn Raspberry Pi Web Building Web Templates Web Statistics Web Certificates Web Editor Web Development XML Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery × HTML HTML Tag Reference HTML Event Reference HTML Color Reference HTML Attribute Reference HTML Canvas Reference HTML SVG Reference Google Maps Reference Charsets HTML Character Sets HTML ASCII HTML ANSI HTML Windows-1252 HTML ISO-8859-1 HTML Symbols HTML UTF-8 CSS CSS Reference CSS Browser Support CSS Selector Reference W3.CSS Reference Bootstrap Reference Icon Reference XML XML Reference XML Http Reference XSLT Reference XML Schema Reference JavaScript JavaScript Reference HTML DOM Reference jQuery Reference AngularJS Reference W3.JS Reference Server Side PHP Reference SQL Reference Python Reference ASP Reference × HTML/CSS HTML Examples HTML Exercises CSS Examples CSS Exercises W3.CSS Examples W3.CSS Templates Bootstrap Examples How To Examples SVG Examples JavaScript JavaScript Examples JavaScript Exercises HTML DOM Examples jQuery Examples AngularJS Examples AJAX Examples W3.JS Examples Server Side PHP Examples ASP Examples SQL Exercises Python Exercises XML XML Examples XSLT Examples XPath Examples XML Schema Examples SVG Examples Quizzes HTML Quiz CSS Quiz JavaScript Quiz Bootstrap Quiz jQuery Quiz PHP Quiz SQL Quiz XML Quiz × ASP Tutorials ASP HOME WP Tutorial WebPages Intro WebPages Razor WebPages Layout WebPages Folders WebPages Global WebPages Forms WebPages Objects WebPages Files WebPages Databases WebPages Helpers WebPages WebGrid WebPages Charts WebPages Email WebPages Security WebPages Publish WebPages Examples WebPages Classes ASP.NET Razor Razor Intro Razor Syntax Razor C# Variables Razor C# Loops Razor C# Logic Razor VB Variables Razor VB Loops Razor VB Logic ASP Classic ASP Intro ASP Syntax ASP Variables ASP Procedures ASP Conditionals ASP Looping ASP Forms ASP Cookies ASP Session ASP Application ASP #include ASP Global.asa ASP AJAX ASP e-mail ASP Examples ASP Reference ASP VB Functions ASP VB Keywords ASP Response ASP Request ASP Application ASP Session ASP Server ASP Error ASP FileSystem ASP TextStream ASP Drive ASP File ASP Folder ASP Dictionary ASP AdRotator ASP BrowserCap ASP Content Linking ASP Content Rotator ASP Quick Ref ADO Tutorial ADO Intro ADO Connect ADO Recordset ADO Display ADO Query ADO Sort ADO Add ADO Update ADO Delete ADO Demo ADO Speed Up ADO Objects ADO Command ADO Connection ADO Error ADO Field ADO Parameter ADO Property ADO Record ADO Recordset ADO Stream ADO DataTypes ASP Quick Reference ❮ Previous Next ❯ ASP Quick Reference from W3Schools. Print it, and fold it in your pocket. Basic Syntax ASP scripts are surrounded by <% and %>. To write some output to a browser: <html> <body> <% response.write("Hello World!") %> </body> </html> The default language in ASP is VBScript. To use another scripting language, insert a language specification at the top of the ASP page: <%@ language="javascript" %> <html> <body> <% .... %> Forms and User Input Request.QueryString is used to collect values in a form with method="get". Information sent from a form with the GET method is visible to everyone (it will be displayed in the browser's address bar) and has limits on the amount of information to send. Request.Form is used to collect values in a form with method="post". Information sent from a form with the POST method is invisible to others and has no limits on the amount of information to send. ASP Cookies A cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests for a page with a browser, it will send the cookie too. The Response.Cookies command is used to create cookies: <% Response.Cookies("firstname")="Alex" Response.Cookies("firstname").Expires="May 10,2002" %> Note: The Response.Cookies command must appear BEFORE the <html> tag! The "Request.Cookies" command is used to retrieve a cookie value: <% fname=Request.Cookies("firstname") response.write("Firstname=" & fname) %> Including Files You can insert the content of one ASP file into another ASP file before the server executes it, with the #include directive. The #include directive is used to create functions, headers, footers, or elements that will be reused on multiple pages Syntax: <!--#include virtual="somefile.inc"--> or <!--#include file ="somefile.inc"--> Use the virtual keyword to indicate a path beginning with a virtual directory. If a file named "header.inc" resides in a virtual directory named /html, the following line would insert the contents of "header.inc": <!-- #include virtual ="/html/header.inc" --> Use the file keyword to indicate a relative path. A relative path begins with the directory that contains the including file. If you have a file in the html directory, and the file "header.inc" resides in html\headers, the following line would insert "header.inc" in your file: <!-- #include file ="headers\header.inc" --> Use the file keyword with the syntax (..\) to include a file from a higher-level directory. Global.asa The Global.asa file is an optional file that can contain declarations of objects, variables, and methods that can be accessed by every page in an ASP application. Note: The Global.asa file must be stored in the root directory of the ASP application, and each application can only have one Global.asa file. The Global.asa file can contain only the following: Application events Session events <object> declarations TypeLibrary declarations the #include directive Application and Session Events In Global.asa you can tell the application and session objects what to do when the application/session starts and what to do when the application/session ends. The code for this is placed in event handlers. Note: We do not use <% and %>, to insert scripts in the Global.asa file, we have to put the subroutines inside the HTML <script> tag: <script language="vbscript" runat="server"> sub Application_OnStart ' some code end sub sub Application_OnEnd ' some code end sub sub Session_OnStart ' some code end sub sub Session_OnEnd ' some code end sub </script> <object> Declarations It is also possible to create objects with session or application scope in Global.asa by using the <object> tag. Note: The <object> tag should be outside the <script> tag! Syntax: <object runat="server" scope="scope" id="id" {progid="progID"|classid="classID"}> ....... </object> TypeLibrary Declarations A TypeLibrary is a container for the contents of a DLL file corresponding to a COM object. By including a call to the TypeLibrary in the Global.asa file, the constants of the COM object can be accessed, and errors can be better reported by the ASP code. If your Web application relies on COM objects that have declared data types in type libraries, you can declare the type libraries in Global.asa. Syntax: <!--METADATA TYPE="TypeLib" file="filename" uuid="typelibraryuuid" version="versionnumber" lcid="localeid" --> The Session Object The Session object is used to store information about, or change settings for a user session. Variables stored in the Session object hold information about one single user, and are available to all pages in one application. Collections Contents - Holds every item added to the session with script commands StaticObjects - Holds every object added to the session with the <object> tag, and a given session Contents.Remove(item/index) - Deletes an item from the Contents collection Contents.RemoveAll() - Deletes every item from the Contents collection Properties CodePage - Sets the code page that will be used to display dynamic content LCID - Sets the locale identifier that will be used to display dynamic content SessionID - Returns the session id Timeout - Sets the timeout for the session Method Abandon - Kills every object in a session object Application Object A group of ASP files that work together to perform some purpose is called an application. The Application object in ASP is used to tie these files together. All users share one Application object. The Application object should hold information that will be used by many pages in the application (like database connection information). Collections Contents - Holds every item added to the application with script commands StaticObjects - Holds every object added to the application with the <object> tag Contents.Remove - Deletes an item from a collection Contents.RemoveAll - Deletes every item from a collection Methods Lock - Prevents a user from changing the application object properties Unlock - Allows a user to change the application object properties The Response Object The Response Object is used to send output to the user from the server. Collection Cookies(name) - Sets a cookie value. If the cookie does not exist, it will be created, and take the value that is specified Properties Buffer - Whether to buffer the output or not. When the output is buffered, the server will hold back the response until all of the server scripts have been processed, or until the script calls the Flush or End method. If this property is set, it should be before the <html> tag in the ASP file CacheControl - Sets whether proxy servers can cache the output or not. When set to Public, the output can be cached by a proxy server Charset(charset_name) - Sets the name of the character set (like "ISO8859-1") to the content type header ContentType - Sets the HTTP content type (like "text/html", "image/gif", "image/jpeg", "text/plain"). Default is "text/html" Expires - Sets how long a page will be cached on a browser before it expires ExpiresAbsolute - Sets a date and time when a page cached on a browser will expire IsClientConnected - Checks if the client is still connected to the server Pics(pics_label) - Adds a value to the pics label response header Status - Specifies the value of the status line Methods AddHeader(name, value) - Adds an HTML header with a specified value AppendToLog string - Adds a string to the end of the server log entry BinaryWrite(data_to_write) - Writes the given information without any character-set conversion Clear - Clears the buffered output. Use this method to handle errors. If Response.Buffer is not set to true, this method will cause a run-time error End - Stops processing the script, and return the current result Flush - Sends buffered output immediately. If Response.Buffer is not set to true, this method will cause a run-time error Redirect(url) - Redirects the user to another url Write(data_to_write) - Writes a text to the user Request Object When a browser asks for a page from a server, it is called a request. The Request Object is used to get information from the user. Collection ClientCertificate - Holds field values stored in the client certificate Cookies(name) - Holds cookie values Form(element_name) - Holds form (input) values. The form must use the post method QueryString(variable_name) - Holds variable values in the query string ServerVariables(server_variable) - Holds server variable values Property TotalBytes - Holds the total number of bytes the client is sending in the body of the request Method BinaryRead - Fetches the data that is sent to the server from the client as part of a post request Server Object The Server Object is used to access properties and methods on the server. Property ScriptTimeout - Sets how long a script can run before it is terminated Method CreateObject(type_of_object) - Creates an instance of an object Execute(path) - Executes an ASP file from inside another ASP file. After executing the called ASP file, the control is returned to the original ASP file GetLastError() - Returns an ASPError object that will describe the error that occurred HTMLEncode(string) - Applies HTML encoding to a string MapPath(path) - Maps a relative or virtual path to a physical path Transfer(path) - Sends all of the state information to another ASP file for processing. After the transfer, procedural control is not returned to the original ASP file URLEncode(string) - Applies URL encoding rules to a string Source : https://www.w3schools.com/asp/asp_quickref.asp ❮ Previous Next ❯ COLOR PICKER HOW TO Tabs Dropdowns Accordions Side Navigation Top Navigation Modal Boxes Progress Bars Parallax Login Form HTML Includes Google Maps Range Sliders Tooltips Slideshow Filter List Sort List SHARE CERTIFICATES HTML CSS JavaScript PHP jQuery Bootstrap XML Read More » REPORT ERROR PRINT PAGE FORUM ABOUT × Your Suggestion: Your E-mail: Page address: Description: Submit × Thank You For Helping Us! Your message has been sent to W3Schools. Top 10 Tutorials HTML Tutorial CSS Tutorial JavaScript Tutorial How To Tutorial W3.CSS Tutorial Bootstrap Tutorial SQL Tutorial PHP Tutorial jQuery Tutorial Python Tutorial Top 10 References HTML Reference CSS Reference JavaScript Reference W3.CSS Reference Bootstrap Reference SQL Reference PHP Reference HTML Colors jQuery Reference Python Reference Top 10 Examples HTML Examples CSS Examples JavaScript Examples How To Examples W3.CSS Examples Bootstrap Examples PHP Examples jQuery Examples Angular Examples XML Examples Web Certificates HTML Certificate CSS Certificate JavaScript Certificate jQuery Certificate PHP Certificate Bootstrap Certificate XML Certificate W3Schools is optimized for learning, testing, and training. Examples might be simplified to improve reading and basic understanding. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using this site, you agree to have read and accepted our terms of use, cookie and privacy policy. Copyright 1999-2018 by Refsnes Data. All Rights Reserved. Powered by W3.CSS.
